library(RODBC)
library(reshape2)
library(dplyr)
con.text <- "DRIVER=SQL Server Native Client 11.0;Database=testing;Server=UWCO-BGILLISLT;Port=1433;UID=bgillis;PWD=sweetness4"
con <- con <- odbcDriverConnect(con.text)
d <- read_csv(paste0(dir,f))
# change a couple of the columns around
names(d)[1] <- "agency"
names(d)[2] <- "program"
d$row_id <- row.names(d)
# get the tool number (tool)
tool <- tolower(substr(names(d)[[3]],1,regexpr(":",names(d)[[3]])-1))
# melt
dl <- melt(d, id.vars= c("agency","program","row_id"))
dl$variable <- as.character(dl$variable)
dl$tool <- rep(tool, length(dl$agency))
dl$submission <- rep(f, length(dl$agency))
# maybe this should just be used to pull in the names?
# import the appropriate fields
#tci <- sqlQuery(con,  paste0("select * from tool_column_info where tool = '",tool,"'"),
#stringsAsFactors =F)
# x <- dl %>%
#   left_join(tci, by = c("variable" = "csv_header" )) %>%
#   select(
#     submission,
#     row_id,
#     col_num,
#     agency,
#     program,
#     display_name,
#     value
#   )
# get client id by row and submission (Cid)
#   I will need to go back in and do this
return(dl)
}
load_cld(dir, f)
y <- load_cld(dir, f)
f <- files[2]
y <- load_cld(dir, f)
for (f in files) {
y = load_cld(dir, f)
x0 <- rbind(x0, y)
}
x0 <- data.frame()
for (f in files) {
y = load_cld(dir, f)
x0 <- rbind(x0, y)
}
sqlQuery(con, "Drop Table if Exists client_level_data_staging")
sqlSave(con, x0, "client_level_data_staging", rownames = F)
con.text <- "DRIVER=SQL Server Native Client 11.0;Database=testing;Server=UWCO-BGILLISLT;Port=1433;UID=bgillis;PWD=sweetness4"
con <- con <- odbcDriverConnect(con.text)
sqlQuery(con, "Drop Table if Exists client_level_data_staging")
sqlSave(con, x0, "client_level_data_staging", rownames = F)
library(RODBC)
library(reshape2)
library(dplyr)
con.text <- "DRIVER=SQL Server Native Client 11.0;Database=testing;Server=UWCO-BGILLISLT;Port=1433;UID=bgillis;PWD=sweetness4"
con <- con <- odbcDriverConnect(con.text)
d <- read_csv(paste0(dir,f))
# change a couple of the columns around
names(d)[1] <- "agency"
names(d)[2] <- "program"
d$row_id <- row.names(d)
dir <- "C:/Users/bgillis/Desktop/CSVs provided by Agencies/"
files <- list.files(dir)
f <- files[1]
d <- read_csv(paste0(dir,f))
names(d)[1] <- "agency"
names(d)[2] <- "program"
d$row_id <- row.names(d)
ap.id <- sqlFetch(con, "agency_program_id")
names(ap.id) <- tolower(names(ap.id))
adist('brian', 'zzzzbrian')
adist('brian', 'brain')
ap.id <- sqlFetch(con, "agency_program_id", stringsAsFactors =F)
names(ap.id) <- tolower(names(ap.id)) # set up names so I don't need to do this
dist.test <- adist(paste(ap.id$agency, ap.id$program), paste(d$agency, d$program))
View(dist.test)
dist.test <- adist(paste(ap.id$agency, ap.id$program), paste(d[1]$agency, d[1]$program))
dist.test <- adist(paste(ap.id$agency, ap.id$program), paste(d[1]$agency, d[[1]]$program))
dist.test <- adist(paste(ap.id$agency, ap.id$program), paste(d[1]$agency, d[1]$program))
dist.test <- adist(paste(ap.id$agency, ap.id$program), paste(d[1,]$agency, d[1,]$program))
View(dist.test)
max(dist.test)
dist.test[V1==max(dist.test)]
View(dist.test)
dist.test[dist.test$V1==max(dist.test)]
dist.test[dist.test==max(dist.test)]
row.name(dist.test[dist.test==max(dist.test)])
View(dist.test)
row.names(dist.test[dist.test==max(dist.test)])
row.names(dist.test[dist.test==max(dist.test)])
grep(max(dist.test),dis.test)
grep(max(dist.test),dist.test)
ap.id[38,]
grep(min(dist.test),dist.test)
grep(min(dist.test),dist.test)
View(dist.test)
View(dist.test)
min(dist.test)
grep(min(dist.test),dist.test)
View(dist.test)
grep(min(dist.test),dist.test, fixed=T)
dist.test[min(dist.test)]
dist.test[dist.test == min(dist.test)]
dist.test[dist.test == min(dist.test)]
which(dist.test == min(dist.test))
ap.id[which(dist.test == min(dist.test)),]
d$ap_id <- rep(ap.id[which(dist.test == min(dist.test)),],length(d$agency))
ap_id <- ap.id[which(dist.test == min(dist.test)),]
d$ap_id <- rep(ap.id[which(dist.test == min(dist.test)),3],length(d$agency))
dl <- melt(d, id.vars= c("ap_id", "agency","program","row_id"))
dl$variable <- as.character(dl$variable)
dl$tool <- rep(tool, length(dl$agency))
dl$submission <- rep(f, length(dl$agency))
tool <- tolower(substr(names(d)[[3]],1,regexpr(":",names(d)[[3]])-1))
dl <- melt(d, id.vars= c("ap_id", "agency","program","row_id"))
dl$variable <- as.character(dl$variable)
dl$tool <- rep(tool, length(dl$agency))
dl$submission <- rep(f, length(dl$agency))
dir =
getwd()
dir
dir = "C:/Users/bgillis/Documents/GitHub Project Data/loading-sep2017-reporting/Full Tool Data"
con.text <- "DRIVER=SQL Server Native Client 11.0;Database=testing;Server=UWCO-BGILLISLT;Port=1433;UID=bgillis;PWD=sweetness4"
con <- con <- odbcDriverConnect(con.text)
library(RODBC)
library(reshape2)
library(dplyr)
sourec("C:/Users/bgillis/Documents/R/SQL Connections.R")
source("C:/Users/bgillis/Documents/R/SQL Connections.R")
mssql_con("testing")
con <- mssql_con("testing")
for (f in files) {
y = load_cld(dir, f)
x0 <- rbind(x0, y)
}
files <- list.files(dir)
for (f in files) {
y = load_cld(dir, f)
x0 <- rbind(x0, y)
}
getwd()
source("loading the client level data function.R")
for (f in files) {
y = load_cld(dir, f)
x0 <- rbind(x0, y)
}
## now we want to load the reported data
library(readr)
library(RODBC)
library(reshape2)
library(dplyr)
source("C:/Users/bgillis/Documents/R/SQL Connections.R")
source("loading the client level data function.R")
con <- mssql_con("testing")
source("loading the client level data function.R")
dir = "C:/Users/bgillis/Documents/GitHub Project Data/loading-sep2017-reporting/Full Tool Data/"
files <- list.files(dir)
for (f in files) {
y = load_cld(dir, f)
x0 <- rbind(x0, y)
}
d <- read_csv(paste0(dir,f))
for (f in files) {
y = load_cld(dir, f, 1)
x0 <- rbind(x0, y)
}
s = 1
for (f in files) {
y = load_cld(dir, f, s)
x0 <- rbind(x0, y)
}
# this function loads the data in the format that we are looking for
####################  Start of function  ####################################
# cld for client level data
load_cld <- function(dir, f, s=0) {
library(RODBC)
library(reshape2)
library(dplyr)
con.text <- "DRIVER=SQL Server Native Client 11.0;Database=testing;Server=UWCO-BGILLISLT;Port=1433;UID=bgillis;PWD=sweetness4"
con <- con <- odbcDriverConnect(con.text)
d <- read_csv(paste0(dir,f,skip = s))
# change a couple of the columns around
names(d)[1] <- "agency"
names(d)[2] <- "program"
d$row_id <- row.names(d)
########## match with the best id# #################
ap.id <- sqlFetch(con, "agency_program_id", stringsAsFactors =F)
names(ap.id) <- tolower(names(ap.id)) # set up names so I don't need to do this
dist.test <- adist(paste(ap.id$agency, ap.id$program), paste(d[1,]$agency, d[1,]$program))
# find the min in the list and the pull that id from the list, add it on to d
d$ap_id <- rep(ap.id[which(dist.test == min(dist.test)),3],length(d$agency))
#### we still need a flag for when more than 1 show up as an option
####################################################
# get the tool number (tool)
tool <- tolower(substr(names(d)[[3]],1,regexpr(":",names(d)[[3]])-1))
################ melt the data #################################
dl <- melt(d, id.vars= c("ap_id", "agency","program","row_id"))
dl$variable <- as.character(dl$variable)
dl$tool <- rep(tool, length(dl$agency))
dl$submission <- rep(f, length(dl$agency))
################################################################
# maybe this should just be used to pull in the names?
# import the appropriate fields
#tci <- sqlQuery(con,  paste0("select * from tool_column_info where tool = '",tool,"'"),
#stringsAsFactors =F)
# x <- dl %>%
#   left_join(tci, by = c("variable" = "csv_header" )) %>%
#   select(
#     submission,
#     row_id,
#     col_num,
#     agency,
#     program,
#     display_name,
#     value
#   )
# get client id by row and submission (Cid)
#   I will need to go back in and do this
# I should remove NAs at some point
return(dl)
}
for (f in files) {
y = load_cld(dir, f, s)
x0 <- rbind(x0, y)
}
# this function loads the data in the format that we are looking for
####################  Start of function  ####################################
# cld for client level data
load_cld <- function(dir, f, s=0) {
library(RODBC)
library(reshape2)
library(dplyr)
con.text <- "DRIVER=SQL Server Native Client 11.0;Database=testing;Server=UWCO-BGILLISLT;Port=1433;UID=bgillis;PWD=sweetness4"
con <- con <- odbcDriverConnect(con.text)
d <- read_csv(paste0(dir,f), skip = s)
# change a couple of the columns around
names(d)[1] <- "agency"
names(d)[2] <- "program"
d$row_id <- row.names(d)
########## match with the best id# #################
ap.id <- sqlFetch(con, "agency_program_id", stringsAsFactors =F)
names(ap.id) <- tolower(names(ap.id)) # set up names so I don't need to do this
dist.test <- adist(paste(ap.id$agency, ap.id$program), paste(d[1,]$agency, d[1,]$program))
# find the min in the list and the pull that id from the list, add it on to d
d$ap_id <- rep(ap.id[which(dist.test == min(dist.test)),3],length(d$agency))
#### we still need a flag for when more than 1 show up as an option
####################################################
# get the tool number (tool)
tool <- tolower(substr(names(d)[[3]],1,regexpr(":",names(d)[[3]])-1))
################ melt the data #################################
dl <- melt(d, id.vars= c("ap_id", "agency","program","row_id"))
dl$variable <- as.character(dl$variable)
dl$tool <- rep(tool, length(dl$agency))
dl$submission <- rep(f, length(dl$agency))
################################################################
# maybe this should just be used to pull in the names?
# import the appropriate fields
#tci <- sqlQuery(con,  paste0("select * from tool_column_info where tool = '",tool,"'"),
#stringsAsFactors =F)
# x <- dl %>%
#   left_join(tci, by = c("variable" = "csv_header" )) %>%
#   select(
#     submission,
#     row_id,
#     col_num,
#     agency,
#     program,
#     display_name,
#     value
#   )
# get client id by row and submission (Cid)
#   I will need to go back in and do this
# I should remove NAs at some point
return(dl)
}
for (f in files) {
y = load_cld(dir, f, s)
x0 <- rbind(x0, y)
}
View(d)
library(RODBC)
library(reshape2)
library(dplyr)
con.text <- "DRIVER=SQL Server Native Client 11.0;Database=testing;Server=UWCO-BGILLISLT;Port=1433;UID=bgillis;PWD=sweetness4"
con <- con <- odbcDriverConnect(con.text)
d <- read_csv(paste0(dir,f), skip = s)
# change a couple of the columns around
names(d)[1] <- "agency"
names(d)[2] <- "program"
d$row_id <- row.names(d)
ap.id <- sqlFetch(con, "agency_program_id", stringsAsFactors =F)
names(ap.id) <- tolower(names(ap.id)) # set up names so I don't need to do this
dist.test <- adist(paste(ap.id$agency, ap.id$program), paste(d[1,]$agency, d[1,]$program))
# find the min in the list and the pull that id from the list, add it on to d
d$ap_id <- rep(ap.id[which(dist.test == min(dist.test)),3],length(d$agency))
tool <- tolower(substr(names(d)[[3]],1,regexpr(":",names(d)[[3]])-1))
dl <- melt(d, id.vars= c("ap_id", "agency","program","row_id"))
dl$variable <- as.character(dl$variable)
dl$tool <- rep(tool, length(dl$agency))
dl$submission <- rep(f, length(dl$agency))
dir = "C:/Users/bgillis/Documents/GitHub Project Data/loading-sep2017-reporting/Full Tool Data/"
files <- list.files(dir)
# this function loads the data in the format that we are looking for
####################  Start of function  ####################################
# cld for client level data
load_cld <- function(dir, f, s=0) {
library(RODBC)
library(reshape2)
library(dplyr)
con.text <- "DRIVER=SQL Server Native Client 11.0;Database=testing;Server=UWCO-BGILLISLT;Port=1433;UID=bgillis;PWD=sweetness4"
con <- con <- odbcDriverConnect(con.text)
d <- read_csv(paste0(dir,f), skip = s)
# change a couple of the columns around
names(d)[1] <- "agency"
names(d)[2] <- "program"
d$row_id <- row.names(d)
########## match with the best id# #################
ap.id <- sqlFetch(con, "agency_program_id", stringsAsFactors =F)
names(ap.id) <- tolower(names(ap.id)) # set up names so I don't need to do this
dist.test <- adist(paste(ap.id$agency, ap.id$program), paste(d[1,]$agency, d[1,]$program))
# find the min in the list and the pull that id from the list, add it on to d
d$ap_id <- rep(ap.id[which(dist.test == min(dist.test)),3],length(d$agency))
#### we still need a flag for when more than 1 show up as an option
####################################################
# get the tool number (tool)
tool <- tolower(substr(names(d)[[3]],1,regexpr(":",names(d)[[3]])-1))
################ melt the data #################################
dl <- melt(d, id.vars= c("ap_id", "agency","program","row_id"))
dl$variable <- as.character(dl$variable)
dl$tool <- rep(tool, length(dl$agency))
dl$submission <- rep(f, length(dl$agency))
################################################################
# maybe this should just be used to pull in the names?
# import the appropriate fields
#tci <- sqlQuery(con,  paste0("select * from tool_column_info where tool = '",tool,"'"),
#stringsAsFactors =F)
# x <- dl %>%
#   left_join(tci, by = c("variable" = "csv_header" )) %>%
#   select(
#     submission,
#     row_id,
#     col_num,
#     agency,
#     program,
#     display_name,
#     value
#   )
# get client id by row and submission (Cid)
#   I will need to go back in and do this
# I should remove NAs at some point
return(dl)
}
for (f in files) {
y = load_cld(dir, f, s)
x0 <- rbind(x0, y)
}
# Run the loop
x0 <- data.frame()
for (f in files) {
y = load_cld(dir, f, s)
x0 <- rbind(x0, y)
}
View(dl)
install.packages("rvest")
url <- "https://www.ctkodm.com/odmxpress/4.3/myodm/"
library(rvest)
html_session(url)
is.session(x)
x <- html_session(url)
is.session(x)
html_node(css = 'a.cusSBMenuItem:nth-child(7)') %>%
html_attr('href')
html_node(css = 'Report Center') %>%
html_attr('href')
html_node(x, css = 'Report Center') %>%
html_attr('href')
html_node(x, css = 'Report Center')
html_node(x, css = 'a.cusSBMenuItem:nth-child(7)') %>%
html_attr('href')
html_node(x, css = 'a.cusSBMenuItem:nth-child(7)')
html_node(x, 'tabindex="4"') %>%
html_attr('href')
html_node(x, 'tabindex="4"')
is.session(x)
nm <- html_nodes(x, 'td.cusSBMenu')
nm <- html_nodes(x, css='td.cusSBMenu')
nm <- html_nodes(x, 'class="cusSBMenu')
nm <- html_nodes(x, 'class="cusSBMenu"')
nm <- html_attrs('href')
nm <- html_nodes(x, "cussBMenuItem")
html_text(x)
read_html(x)
nm <- html_nodes(x, "cussBMenuItem")
y <-read_html(x)
nm <- html_nodes(y, "cussBMenuItem")
nm <- html_nodes(y, "cussBMenuItem")
html_text(y)
nm <- html_nodes(y, "cussBMenuItem") %>% html_attrs('href')
nm <- html_nodes(y, "td")
y <-read_html(x)
y <-read_html(url)
nm <- html_nodes(y, "td")
nm <- html_nodes(y, "html body table.cssPageContainer tbody tr td.cusSBMenu")
nm <- html_nodes(y, css = "html body table.cssPageContainer tbody tr td.cusSBMenu")
nm <- html_nodes(y, "body")
nm <- html_nodes(y, "body") %>% html_nodes("table")
nm <- html_nodes(y, "body")
html_text(nm)
url <- "https://www.ctkodm.com/uwcentralohio/"
x <- html_session(url)
dl <- dl[is.na(dl$value)==0,]
# this function loads the data in the format that we are looking for
####################  Start of function  ####################################
# cld for client level data
load_cld <- function(dir, f, s=0) {
library(RODBC)
library(reshape2)
library(dplyr)
con.text <- "DRIVER=SQL Server Native Client 11.0;Database=testing;Server=UWCO-BGILLISLT;Port=1433;UID=bgillis;PWD=sweetness4"
con <- con <- odbcDriverConnect(con.text)
d <- read_csv(paste0(dir,f), skip = s)
# change a couple of the columns around
names(d)[1] <- "agency"
names(d)[2] <- "program"
d$row_id <- row.names(d)
########## match with the best id# #################
ap.id <- sqlFetch(con, "agency_program_id", stringsAsFactors =F)
names(ap.id) <- tolower(names(ap.id)) # set up names so I don't need to do this
dist.test <- adist(paste(ap.id$agency, ap.id$program), paste(d[1,]$agency, d[1,]$program))
# find the min in the list and the pull that id from the list, add it on to d
d$ap_id <- rep(ap.id[which(dist.test == min(dist.test)),3],length(d$agency))
#### we still need a flag for when more than 1 show up as an option
####################################################
# get the tool number (tool)
tool <- tolower(substr(names(d)[[3]],1,regexpr(":",names(d)[[3]])-1))
################ melt the data #################################
dl <- melt(d, id.vars= c("ap_id", "agency","program","row_id"))
dl$variable <- as.character(dl$variable)
dl$tool <- rep(tool, length(dl$agency))
dl$submission <- rep(f, length(dl$agency))
dl <- dl[is.na(dl$value)==0,]
################################################################
# maybe this should just be used to pull in the names?
# import the appropriate fields
#tci <- sqlQuery(con,  paste0("select * from tool_column_info where tool = '",tool,"'"),
#stringsAsFactors =F)
# x <- dl %>%
#   left_join(tci, by = c("variable" = "csv_header" )) %>%
#   select(
#     submission,
#     row_id,
#     col_num,
#     agency,
#     program,
#     display_name,
#     value
#   )
# get client id by row and submission (Cid)
#   I will need to go back in and do this
# I should remove NAs at some point
return(dl)
}
x0 <- data.frame()
for (f in files) {
y = load_cld(dir, f, s)
x0 <- rbind(x0, y)
}
sqlQuery(con, "Drop Table if Exists client_level_data_from_ctk_staging")
sqlSave(con, x0, "client_level_data_from_ctk_staging", rownames = F)
library(dplyr)
## now we want to load the reported data
source("C:/Users/bgillis/Documents/R/SQL Connections.R")
source("Ind Data Melting and Cleaning Funcition.R")
con <- mssql_con("testing")
dir = "C:/Users/bgillis/Documents/GitHub/loading-sep2017-reporting-DATA/CTK Report Runs/report_run_2017-10-06/"
files <- list.files(dir)
s = 1
# s is an option to skip a row, reports have a section header but the CSVs don't
# Run the loop
df <- data.frame()
for (f in files) {
y = load_ind_data(dir, f, s)
df <- rbind(df, y)
}
# quick test: look at submissions and number of rows
qt <- df %>%
group_by(submission) %>%
summarise(rows = max(row_id))
library(dplyr)
## now we want to load the reported data
source("C:/Users/bgillis/Documents/R/SQL Connections.R")
source("Ind Data Melting and Cleaning Funcition.R")
con <- mssql_con("testing")
dir = "C:/Users/bgillis/Documents/GitHub/loading-sep2017-reporting-DATA/CTK Report Runs/report_run_2017-10-06/"
files <- list.files(dir)
s = 1
# s is an option to skip a row, reports have a section header but the CSVs don't
# Run the loop
df <- data.frame()
for (f in files) {
y = load_ind_data(dir, f, s)
df <- rbind(df, y)
}
# quick test: look at submissions and number of rows
qt <- df %>%
group_by(submission) %>%
summarise(rows = max(row_id))
View(qt)
